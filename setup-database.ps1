# =============================================
# AURA Database Setup Script for SQL Server
# =============================================
# Script PowerShell ƒë·ªÉ t·ª± ƒë·ªông t·∫°o database v√† tables

param(
    [string]$ServerName = "localhost",
    [string]$DatabaseName = "aura_db",
    [string]$UseWindowsAuth = $true,
    [string]$Username = "",
    [string]$Password = "",
    [switch]$CreateDatabase = $false,
    [switch]$SkipSampleData = $false
)

# Function ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    } else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

# Function ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi SQL Server
function Test-SqlServerConnection {
    param($ServerName, $DatabaseName, $UseWindowsAuth, $Username, $Password)
    
    try {
        if ($UseWindowsAuth) {
            $connectionString = "Server=$ServerName;Database=$DatabaseName;Integrated Security=true;TrustServerCertificate=true;"
        } else {
            $connectionString = "Server=$ServerName;Database=$DatabaseName;User Id=$Username;Password=$Password;TrustServerCertificate=true;"
        }
        
        $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
        $connection.Open()
        $connection.Close()
        return $true
    } catch {
        Write-ColorOutput Red "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi SQL Server: $($_.Exception.Message)"
        return $false
    }
}

# Function ƒë·ªÉ ch·∫°y SQL script
function Invoke-SqlScript {
    param($ServerName, $DatabaseName, $UseWindowsAuth, $Username, $Password, $ScriptPath)
    
    try {
        if ($UseWindowsAuth) {
            $connectionString = "Server=$ServerName;Database=$DatabaseName;Integrated Security=true;TrustServerCertificate=true;"
        } else {
            $connectionString = "Server=$ServerName;Database=$DatabaseName;User Id=$Username;Password=$Password;TrustServerCertificate=true;"
        }
        
        $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
        $connection.Open()
        
        $scriptContent = Get-Content $ScriptPath -Raw
        $command = New-Object System.Data.SqlClient.SqlCommand($scriptContent, $connection)
        $command.CommandTimeout = 300 # 5 minutes timeout
        
        Write-ColorOutput Yellow "üîÑ ƒêang ch·∫°y SQL script..."
        $command.ExecuteNonQuery()
        
        $connection.Close()
        return $true
    } catch {
        Write-ColorOutput Red "‚ùå L·ªói khi ch·∫°y SQL script: $($_.Exception.Message)"
        return $false
    }
}

# Main execution
Write-ColorOutput Cyan "üöÄ AURA Database Setup Script"
Write-ColorOutput Cyan "================================="

# Ki·ªÉm tra SQL Server Management Studio c√≥ c√†i ƒë·∫∑t kh√¥ng
Write-ColorOutput Yellow "üîç Ki·ªÉm tra SQL Server..."

# Ki·ªÉm tra k·∫øt n·ªëi
if (-not (Test-SqlServerConnection -ServerName $ServerName -DatabaseName "master" -UseWindowsAuth $UseWindowsAuth -Username $Username -Password $Password)) {
    Write-ColorOutput Red "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi SQL Server. Vui l√≤ng ki·ªÉm tra:"
    Write-ColorOutput Red "   - SQL Server ƒëang ch·∫°y"
    Write-ColorOutput Red "   - SQL Server Browser service ƒëang ch·∫°y"
    Write-ColorOutput Red "   - Firewall cho ph√©p port 1433"
    Write-ColorOutput Red "   - Authentication settings"
    exit 1
}

Write-ColorOutput Green "‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!"

# T·∫°o database n·∫øu c·∫ßn
if ($CreateDatabase) {
    Write-ColorOutput Yellow "üîÑ ƒêang t·∫°o database '$DatabaseName'..."
    
    try {
        if ($UseWindowsAuth) {
            $connectionString = "Server=$ServerName;Database=master;Integrated Security=true;TrustServerCertificate=true;"
        } else {
            $connectionString = "Server=$ServerName;Database=master;User Id=$Username;Password=$Password;TrustServerCertificate=true;"
        }
        
        $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
        $connection.Open()
        
        $createDbScript = "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = '$DatabaseName') CREATE DATABASE [$DatabaseName];"
        $command = New-Object System.Data.SqlClient.SqlCommand($createDbScript, $connection)
        $command.ExecuteNonQuery()
        
        $connection.Close()
        Write-ColorOutput Green "‚úÖ Database '$DatabaseName' ƒë√£ ƒë∆∞·ª£c t·∫°o!"
    } catch {
        Write-ColorOutput Red "‚ùå L·ªói khi t·∫°o database: $($_.Exception.Message)"
        exit 1
    }
}

# Ki·ªÉm tra file SQL script
$scriptPath = Join-Path $PSScriptRoot "database-schema.sql"
if (-not (Test-Path $scriptPath)) {
    Write-ColorOutput Red "‚ùå Kh√¥ng t√¨m th·∫•y file database-schema.sql"
    Write-ColorOutput Red "   Vui l√≤ng ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi script n√†y."
    exit 1
}

# Ch·∫°y SQL script
Write-ColorOutput Yellow "üîÑ ƒêang t·∫°o tables v√† schema..."

if ($SkipSampleData) {
    Write-ColorOutput Yellow "‚ö†Ô∏è B·ªè qua sample data theo y√™u c·∫ßu"
    # T·∫°o temporary script kh√¥ng c√≥ sample data
    $scriptContent = Get-Content $scriptPath -Raw
    $scriptContent = $scriptContent -replace "-- Th√™m user m·∫´u.*?GO\s*", ""
    $scriptContent = $scriptContent -replace "-- Th√™m health record m·∫´u.*?GO\s*", ""
    $scriptContent = $scriptContent -replace "-- Th√™m finance record m·∫´u.*?GO\s*", ""
    $scriptContent = $scriptContent -replace "-- Th√™m note m·∫´u.*?GO\s*", ""
    $scriptContent = $scriptContent -replace "-- Th√™m translation m·∫´u.*?GO\s*", ""
    
    $tempScriptPath = Join-Path $PSScriptRoot "database-schema-temp.sql"
    $scriptContent | Out-File -FilePath $tempScriptPath -Encoding UTF8
    
    if (Invoke-SqlScript -ServerName $ServerName -DatabaseName $DatabaseName -UseWindowsAuth $UseWindowsAuth -Username $Username -Password $Password -ScriptPath $tempScriptPath) {
        Remove-Item $tempScriptPath
        Write-ColorOutput Green "‚úÖ Database schema ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
    } else {
        Remove-Item $tempScriptPath -ErrorAction SilentlyContinue
        exit 1
    }
} else {
    if (Invoke-SqlScript -ServerName $ServerName -DatabaseName $DatabaseName -UseWindowsAuth $UseWindowsAuth -Username $Username -Password $Password -ScriptPath $scriptPath) {
        Write-ColorOutput Green "‚úÖ Database schema v√† sample data ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
    } else {
        exit 1
    }
}

# Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn database m·ªõi
Write-ColorOutput Yellow "üîç Ki·ªÉm tra k·∫øt n·ªëi database m·ªõi..."
if (Test-SqlServerConnection -ServerName $ServerName -DatabaseName $DatabaseName -UseWindowsAuth $UseWindowsAuth -Username $Username -Password $Password) {
    Write-ColorOutput Green "‚úÖ K·∫øt n·ªëi database '$DatabaseName' th√†nh c√¥ng!"
} else {
    Write-ColorOutput Red "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database '$DatabaseName'"
    exit 1
}

# Hi·ªÉn th·ªã th√¥ng tin ho√†n th√†nh
Write-ColorOutput Cyan ""
Write-ColorOutput Cyan "üéâ HO√ÄN TH√ÄNH!"
Write-ColorOutput Cyan "================================="
Write-ColorOutput Green "‚úÖ Database: $DatabaseName"
Write-ColorOutput Green "‚úÖ Server: $ServerName"
Write-ColorOutput Green "‚úÖ Tables: users, health_records, finance_records, notes, translations"
Write-ColorOutput Green "‚úÖ Indexes, triggers, stored procedures, views ƒë√£ ƒë∆∞·ª£c t·∫°o"
if (-not $SkipSampleData) {
    Write-ColorOutput Green "‚úÖ Sample data ƒë√£ ƒë∆∞·ª£c th√™m"
}
Write-ColorOutput Cyan ""
Write-ColorOutput Yellow "üìù B∆∞·ªõc ti·∫øp theo:"
Write-ColorOutput White "   1. C·∫≠p nh·∫≠t DATABASE_URL trong file .env"
Write-ColorOutput White "   2. Ch·∫°y: npm run setup:db"
Write-ColorOutput White "   3. Ch·∫°y: npm start"
Write-ColorOutput Cyan ""
Write-ColorOutput Green "üîó DATABASE_URL cho .env:"
if ($UseWindowsAuth) {
    Write-ColorOutput White "   DATABASE_URL=`"sqlserver://$ServerName:1433;database=$DatabaseName;integratedSecurity=true;encrypt=true;trustServerCertificate=true`""
} else {
    Write-ColorOutput White "   DATABASE_URL=`"sqlserver://$ServerName:1433;database=$DatabaseName;user=$Username;password=$Password;encrypt=true;trustServerCertificate=true`""
}
Write-ColorOutput Cyan "================================="

